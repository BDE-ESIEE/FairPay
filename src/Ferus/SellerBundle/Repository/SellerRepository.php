<?php

namespace Ferus\SellerBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;
use Ferus\SellerBundle\Entity\Seller;

/**
 * SellerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SellerRepository extends EntityRepository
{
    public function findOneByBarcode($barcode)
    {
        return $this->createQueryBuilder('se')
            ->where('se.id = :barcode')
            ->setParameter('barcode', substr($barcode, 1))
            ->getQuery()
            ->getSingleResult();
    }

    public function queryAll()
    {
        return $this->createQueryBuilder('se')
            ->getQuery();
    }

    /**
     * @param Seller $seller
     * @return Seller|null
     */
    public function findSoftDeleted(Seller $seller)
    {
        $query = $this->createQueryBuilder('se')
            ->where('se.deletedAt IS NOT NULL')
            ->andWhere('se.name LIKE :name')
            ->setParameter('name', $seller->getName())
            ->getQuery()
        ;

        try{
            return $query->getSingleResult();
        }
        catch(NoResultException $e){
            return null;
        }
    }

    public function remove(Seller $seller)
    {
        $this->createQueryBuilder('se')
            ->delete()
            ->where('se = :seller')
            ->setParameter('seller', $seller)
            ->getQuery()
            ->execute();
    }

    public function search($query)
    {
        if(preg_match('#[sS][0-9]+#', $query))
            return $this->createQueryBuilder('se')
                ->where('se.id = :barcode')
                ->setParameter('barcode', substr($query, 1))
                ->getQuery()
                ->getResult();

        return $this->createQueryBuilder('se')
            ->where('se.name LIKE :name')
            ->setParameter('name', "%$query%")
            ->getQuery()
            ->getResult();
    }
}
