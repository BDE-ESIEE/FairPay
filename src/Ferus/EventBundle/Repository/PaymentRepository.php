<?php

namespace Ferus\EventBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Ferus\EventBundle\Entity\Event;
use Doctrine\ORM\Query;

/**
 * PaymentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PaymentRepository extends EntityRepository
{
    public function findFromEvent(Event $event)
    {
        $qb = $this->createQueryBuilder('p')
            ->select('p.studentId, CONCAT(p.lastName, CONCAT(\' \', p.firstName)) name, p.email')
            ->where('p.event = :event')
            ->setParameter('event', $event)
            ->groupBy('p.email')
            ->orderBy('p.lastName', 'ASC')
            ->addOrderBy('p.firstName', 'ASC')
        ;

        foreach($event->getTickets() as $ticket){
            $qb->addSelect("SUM(IF(IDENTITY(p.ticket) = {$ticket->getId()}, 1, 0)) as ticket_{$ticket->getId()}");
        }

        return $qb
            ->getQuery()
            ->getResult(Query::HYDRATE_ARRAY)
        ;
    }

    public function findEventStats(Event $event)
    {
        return $this->createQueryBuilder('p')
            ->select('p.method, SUM(p.amount) amount')
            ->where('p.event = :event')
            ->setParameter('event', $event)
            ->groupBy('p.method')
            ->getQuery()
            ->getResult(Query::HYDRATE_ARRAY);
    }

    public function findEventStatsTickets(Event $event)
    {
        $stat = $this->createQueryBuilder('p')
            ->select('p.method, t.name, SUM(p.amount) amount')
            ->where('p.event = :event')
            ->setParameter('event', $event)
            ->join('p.ticket', 't')
            ->groupBy('t.id, p.method')
            ->getQuery()
            ->getResult(Query::HYDRATE_ARRAY);

        $result = array();

        foreach($stat as $s){
            if(!isset($result[$s['name']]))
                $result[$s['name']] =  array();
            $result[$s['name']][] = $s;
        }

        return $result;
    }

    public function removeFrom(Event $event, $email)
    {
        $this->createQueryBuilder('p')
            ->delete()
            ->where('p.event = :event AND p.email = :email')
            ->setParameter('event', $event)
            ->setParameter('email', $email)
            ->getQuery()
            ->execute()
            ;
    }
}
