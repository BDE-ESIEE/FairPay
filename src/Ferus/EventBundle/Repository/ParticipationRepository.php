<?php

namespace Ferus\EventBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;
use Doctrine\ORM\Query;
use Ferus\EventBundle\Entity\Event;

/**
 * ParticipationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ParticipationRepository extends EntityRepository
{
    public function findOneFromEvent(Event $event, $email)
    {
        try{
            return $this->createQueryBuilder('p')
                ->where('p.event = :event')
                ->setParameter('event', $event)
                ->andWhere('p.email = :email')
                ->setParameter('email', $email)
                ->andWhere('p.expired = false')
                ->getQuery()->getSingleResult();
        }
        catch(NoResultException $e){
            return null;
        }
    }

    public function findExternals(Event $event)
    {
        return $this->createQueryBuilder('p')
            ->where('p.event = :event')
            ->setParameter('event', $event)
            ->andWhere('p.studentId IS NULL')
            ->orderBy('p.lastName, p.firstName')
            ->andWhere('p.expired = false')
            ->getQuery()->getResult();
    }

    public function findFromEvent(Event $event)
    {
        $result = $this->createQueryBuilder('p')
            ->select('p.studentId, CONCAT(p.lastName, CONCAT(\' \', p.firstName)), p.email, p.fields, p.options')
            ->where('p.event = :event')
            ->setParameter('event', $event)
            ->andWhere('p.expired = false')
            ->getQuery()->getResult(Query::HYDRATE_ARRAY);

        foreach($result as $key => $a){
            $result[$key]['fields'] = implode(';', $a['fields']);
            $result[$key]['options'] = implode(';', $a['options']);
        }

        return $result;
    }

    public function findEventPaymentStats(Event $event)
    {
        return $this->createQueryBuilder('p')
            ->select('p.paymentMethod AS method, SUM(p.paymentAmount) AS amount')
            ->where('p.event = :event')
                ->setParameter('event', $event)
            ->andWhere('p.expired = 0')
            ->andWhere('p.paymentMethod IS NOT NULL')
            ->groupBy('p.paymentMethod')
            ->getQuery()
            ->getResult(Query::HYDRATE_ARRAY);
    }

    public function findEventDepositStats(Event $event)
    {
        return $this->createQueryBuilder('p')
            ->select('p.depositMethod AS method, SUM(p.depositAmount) AS amount')
            ->where('p.event = :event')
                ->setParameter('event', $event)
            ->andWhere('p.expired = 0')
            ->andWhere('p.depositMethod IS NOT NULL')
            ->groupBy('p.paymentMethod')
            ->getQuery()
            ->getResult(Query::HYDRATE_ARRAY);
    }
}
