<?php

namespace Ferus\AccountBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;
use Ferus\AccountBundle\Entity\Account;
use Ferus\SellerBundle\Entity\Seller;
use Ferus\StudentBundle\Entity\Student;

/**
 * AccountRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AccountRepository extends EntityRepository
{
    public function queryAll()
    {
        return $this->createQueryBuilder('a')
            ->getQuery();
    }

    public function findOneByStudentId($id)
    {
        return $this->createQueryBuilder('a')
            ->where('IDENTITY(a.student) = :id')
            ->setParameter('id', $id)
            ->getQuery()
            ->getSingleResult();
    }

    public function findOneById($id)
    {
        return $this->createQueryBuilder('a')
            ->where('a.id = :id')
            ->setParameter('id', $id)
            ->getQuery()
            ->getSingleResult();
    }

    public function findOneByBarcode($barcode)
    {
        if(preg_match('/^\d+$/', ''.$barcode))
            return $this->findOneByStudentId($barcode);

        return $this->createQueryBuilder('a')
            ->where('IDENTITY(a.seller) = :barcode')
            ->setParameter('barcode', substr($barcode, 1))
            ->getQuery()
            ->getSingleResult();
    }

    public function querySearch($query)
    {
        $qb = $this->createQueryBuilder('a')
            ->leftJoin('a.student', 's')
            ->leftJoin('a.seller', 'se')
        ;

        $query = trim($query);
        $words = explode(' ', $query);

        foreach($words as $key => $word){
            $qb
                ->andWhere("s.firstName LIKE :query$key OR s.lastName LIKE :query$key OR se.name LIKE :query$key")
                ->setParameter("query$key", "%$word%");
        }

        return $qb->getQuery();
    }

    public function remove(Account $account)
    {
        $this->createQueryBuilder('a')
            ->delete()
            ->where('a = :account')
            ->setParameter('account', $account)
            ->getQuery()
            ->execute();
    }

    /**
     * @param Student|Seller $owner
     * @return Account|null
     */
    public function findSoftDeleted($owner)
    {
        $qb = $this->createQueryBuilder('a')
            ->where('a.deletedAt IS NOT NULL')
        ;

        if($owner instanceof Student)
            $qb ->andWhere('a.student = :student')
                ->setParameter('student', $owner);

        if($owner instanceof Seller)
            $qb ->andWhere('a.seller = :seller')
                ->setParameter('seller', $owner);

        $query = $qb->getQuery();

        try{
            return $query->getSingleResult();
        }
        catch(NoResultException $e){
            return null;
        }
    }

    /**
     * @param $apiKey
     * @return Account
     */
    public function findOneBySellerApiKey($apiKey)
    {
        return $this->createQueryBuilder('a')
            ->join('a.seller', 'se')
            ->where('se.apiKey = :apiKey')
            ->setParameter('apiKey', $apiKey)
            ->getQuery()
            ->getSingleResult();
    }
}
