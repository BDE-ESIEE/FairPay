<?php

namespace Ferus\AccountBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;
use Ferus\AccountBundle\Entity\Account;
use Ferus\StudentBundle\Entity\Student;

/**
 * AccountRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AccountRepository extends EntityRepository
{
    public function queryAll()
    {
        return $this->createQueryBuilder('a')
            ->select('a, s')
            ->join('a.student', 's')
            ->getQuery();
    }

    public function findOneByStudentId($id)
    {
        return $this->createQueryBuilder('a')
            ->where('IDENTITY(a.student) = :id')
            ->setParameter('id', $id)
            ->getQuery()
            ->getSingleResult();
    }

    public function querySearch($query)
    {
        $qb = $this->createQueryBuilder('a')
            ->join('a.student', 's')
        ;

        $query = trim($query);
        $words = explode(' ', $query);

        foreach($words as $key => $word){
            $qb
                ->andWhere("s.firstName LIKE :query$key OR s.lastName LIKE :query$key")
                ->setParameter("query$key", "%$word%");
        }

        return $qb->getQuery();
    }

    public function remove(Account $account)
    {
        $this->createQueryBuilder('a')
            ->delete()
            ->where('a = :account')
            ->setParameter('account', $account)
            ->getQuery()
            ->execute();
    }

    /**
     * @param Student $student
     * @return Account|null
     */
    public function findSoftDeleted(Student $student)
    {
        $query = $this->createQueryBuilder('a')
            ->where('a.deletedAt IS NOT NULL')
            ->andWhere('a.student = :student')
            ->setParameter('student', $student)
            ->getQuery()
        ;

        try{
            return $query->getSingleResult();
        }
        catch(NoResultException $e){
            return null;
        }
    }
}
